// Generated by CoffeeScript 1.7.1
(function() {
  var defer, dequal, uuid,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  defer = function(f) {
    var d;
    d = (typeof $ !== "undefined" && $ !== null ? $.Deferred() : void 0) || (typeof Deferred === "function" ? Deferred() : void 0);
    f(d);
    return d;
  };

  uuid = (function(_this) {
    return function() {
      var s4;
      s4 = function() {
        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
      };
      return s4() + s4() + s4() + s4();
    };
  })(this);

  
function clone(obj) {
    if (null == obj || "object" != typeof obj) return obj;
    var copy = obj.constructor();
    for (var attr in obj) {
        if (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];
    }
    return copy;
}
;

  dequal = function(left, right) {
    var i, isLeftPrimitive, isRightPrimitive, key, results, _ref, _ref1;
    isLeftPrimitive = (_ref = typeof left) === 'string' || _ref === 'number' || _ref === 'boolean' || _ref === 'undefined';
    isRightPrimitive = (_ref1 = typeof right) === 'string' || _ref1 === 'number' || _ref1 === 'boolean' || _ref1 === 'undefined';
    if (isLeftPrimitive && isRightPrimitive) {
      return left === right;
    }
    if (isLeftPrimitive || isRightPrimitive) {
      return false;
    }
    results = (function() {
      var _i, _len, _results, _results1;
      if (left instanceof Array) {
        _results = [];
        for (_i = 0, _len = left.length; _i < _len; _i++) {
          i = left[_i];
          _results.push(dequal(left[i], right[i]));
        }
        return _results;
      } else if (left instanceof Object) {
        _results1 = [];
        for (key in left) {
          _results1.push(dequal(left[key], right[key]));
        }
        return _results1;
      }
    })();
    return (results.filter(function(item) {
      return item;
    })).length === results.length;
  };

  window.Momic = {};

  Momic.Collection = (function() {
    Collection.dequal = dequal;

    function Collection(key, _arg) {
      this.key = key;
      this.schema = _arg.schema, this.hasInstance = _arg.hasInstance, this.hasPersistence = _arg.hasPersistence, this.endpoint = _arg.endpoint, this.autoSave = _arg.autoSave;
      this.init = __bind(this.init, this);
      this.remove = __bind(this.remove, this);
      this.find = __bind(this.find, this);
      this.findOne = __bind(this.findOne, this);
      this.drop = __bind(this.drop, this);
      this.insert = __bind(this.insert, this);
      this.save = __bind(this.save, this);
      this.loadContent = __bind(this.loadContent, this);
      this.updateInstanceIfNeeded = __bind(this.updateInstanceIfNeeded, this);
      this.load = __bind(this.load, this);
      this.count = __bind(this.count, this);
      this._updateCount = __bind(this._updateCount, this);
      if (this.autoSave == null) {
        this.autoSave = true;
      }
      if (this.hasPersistence == null) {
        this.hasPersistence = true;
      }
      if (this.hasInstance == null) {
        this.hasInstance = true;
      }
      if (!(this.hasPersistence || this.hasPersistence)) {
        throw new Error('hasInstance or hasPersistence must be true');
      }
      this._count = 0;
      this._instance = null;
    }

    Collection.prototype._updateCount = function(_count) {
      this._count = _count;
    };

    Collection.prototype.count = function() {
      return this._count;
    };

    Collection.prototype.load = function() {
      return defer((function(_this) {
        return function(d) {
          return localforage.getItem(_this.key).then(function(content) {
            return d.resolve(content);
          });
        };
      })(this));
    };

    Collection.prototype.updateInstanceIfNeeded = function(instance) {
      if (this.hasInstance) {
        return this._instance = instance;
      }
    };

    Collection.prototype.loadContent = function() {
      return defer((function(_this) {
        return function(d) {
          if (_this.hasInstance && _this._instance) {
            return d.resolve(_this._instance);
          } else {
            return _this.load().then(function(content) {
              return d.resolve(content);
            });
          }
        };
      })(this));
    };

    Collection.prototype.save = function(content) {
      return defer((function(_this) {
        return function(d) {
          var tosave;
          if (!_this.hasPersistence) {
            throw "`" + _this.key + "` collection doesn't have storage";
          }
          tosave = content != null ? content : _this._instance;
          return localforage.setItem(_this.key, tosave).then(function() {
            _this.resolved = true;
            _this.updateInstanceIfNeeded(tosave);
            console.log('tosave length', tosave.length);
            return d.resolve();
          });
        };
      })(this));
    };

    Collection.prototype.insert = function(obj) {
      return defer((function(_this) {
        return function(d) {
          var array, ret;
          array = obj.length ? obj.map(function(i) {
            var ret;
            ret = clone(i);
            if (ret.id == null) {
              ret.id = uuid();
            }
            return ret;
          }) : (ret = clone(obj), ret.id != null ? ret.id : ret.id = uuid(), [ret]);
          return _this.loadContent().then(function(content) {
            var i, _i, _len;
            for (_i = 0, _len = array.length; _i < _len; _i++) {
              i = array[_i];
              content.push(i);
            }
            _this._updateCount(content.length);
            if (_this.autoSave) {
              return _this.save().then(function() {
                if (_this.hasInstance) {
                  _this._instance = content;
                }
                return d.resolve();
              });
            } else {
              _this.resolved = false;
              if (_this.hasInstance) {
                _this._instance = content;
              }
              return d.resolve();
            }
          });
        };
      })(this));
    };

    Collection.prototype.drop = function() {
      return defer((function(_this) {
        return function(d) {
          return localforage.setItem(_this.key, '[]').then(function() {
            return d.resolve();
          });
        };
      })(this));
    };

    Collection.prototype.findOne = function(func_or_obj) {
      return defer((function(_this) {
        return function(d) {
          return _this.find(func_or_obj).then(function(_arg) {
            var first;
            first = _arg[0];
            return d.resolve(first);
          });
        };
      })(this));
    };

    Collection.prototype.find = function(func_or_obj) {
      if (func_or_obj == null) {
        func_or_obj = null;
      }
      return defer((function(_this) {
        return function(d) {
          return _this.loadContent().then(function(content) {
            var func, queryObj, results;
            results = func_or_obj == null ? content : (func = func_or_obj) instanceof Function ? content.filter(function(item) {
              return func(item);
            }) : (queryObj = func_or_obj) instanceof Object ? content.filter(function(item) {
              return dequal(queryObj, item);
            }) : void 0;
            return d.resolve(results);
          });
        };
      })(this));
    };

    Collection.prototype.remove = function(func_or_obj) {
      var d;
      return d = defer((function(_this) {
        return function(d) {
          var c, loading;
          c = null;
          loading = defer(function(d2) {
            return _this.loadContent().then(function(content) {
              c = content;
              return d2.resolve(content);
            });
          });
          return loading.then(function(content) {
            console.log(3);
            return _this.find(func_or_obj).then(function(toremove) {
              var remove_ids;
              remove_ids = toremove.map(function(i) {
                return i.id;
              });
              content = content.filter(function(item) {
                var _ref;
                return _ref = item.id, __indexOf.call(remove_ids, _ref) < 0;
              });
              console.log('save done!');
              return _this.save(content).then(function() {
                return d.resolve();
              });
            });
          });
        };
      })(this));
    };

    Collection.prototype.init = function() {
      return defer((function(_this) {
        return function(d) {
          return localforage.getItem(_this.key, function(content) {
            var cottent, e;
            if (content != null) {
              try {
                cottent = JSON.parse(content);
              } catch (_error) {
                e = _error;
                throw "" + _this.key + " is not used as momic repository";
              }
            } else {
              if (content == null) {
                content = [];
              }
            }
            if (_this.hasInstance) {
              _this._instance = content;
            }
            if (_this.hasPersistence) {
              return _this.save(content).then(function() {
                return d.resolve();
              });
            } else {
              _this._updateCount(content.length);
              return d.resolve();
            }
          });
        };
      })(this));
    };

    return Collection;

  })();

  Momic.DB = (function() {
    DB.prototype.collectionKey = function(collectionName) {
      return this.prefix + '_' + collectionName;
    };

    function DB(opts) {
      this.init = __bind(this.init, this);
      this.collectionKey = __bind(this.collectionKey, this);
      var colOpts, key;
      this.initialized = false;
      this.prefix = opts.name;
      this.storage = (opts != null ? opts.storage : void 0) || 'localforage';
      this.collections = (function() {
        var _ref, _results;
        _ref = opts.collections;
        _results = [];
        for (key in _ref) {
          colOpts = _ref[key];
          if (colOpts.storage == null) {
            colOpts.storage = this.storage;
          }
          _results.push(this[key] = new Momic.Collection(this.collectionKey(key), colOpts));
        }
        return _results;
      }).call(this);
    }

    DB.prototype.init = function() {
      return defer((function(_this) {
        return function(d) {
          var inits;
          inits = _this.collections.map(function(col) {
            return col.init();
          });
          return Promise.all(inits).then(function() {
            _this.initialized = true;
            return d.resolve();
          });
        };
      })(this));
    };

    return DB;

  })();

}).call(this);
